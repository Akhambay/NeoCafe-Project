# Generated by Django 4.0.10 on 2024-02-04 19:33

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('working_days', models.CharField(choices=[('monday', 'Monday'), ('tuesday', 'Tuesday'), ('wednesday', 'Wednesday'), ('thursday', 'Thursday'), ('friday', 'Friday'), ('saturday', 'Saturday'), ('sunday', 'Sunday')], max_length=15)),
                ('start_time', models.TimeField(max_length=15)),
                ('end_time', models.TimeField(max_length=15)),
            ],
        ),
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('branch_name', models.CharField(max_length=250)),
                ('address', models.CharField(max_length=500)),
                ('phone_number', models.CharField(max_length=15)),
                ('image', models.ImageField(blank=True, null=True, upload_to='branch_images/')),
                ('description', models.TextField(blank=True)),
                ('link_2gis', models.CharField(max_length=15)),
                ('schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='branch_schedule', to='users.schedule')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(blank=True, max_length=50, null=True)),
                ('last_name', models.CharField(blank=True, max_length=50, null=True)),
                ('user_type', models.CharField(choices=[('admin', 'Admin'), ('waiter', 'Waiter'), ('bartender', 'Bartender'), ('customer', 'Customer')], max_length=50)),
                ('DOB', models.DateField(blank=True, null=True, verbose_name='Date of Birth')),
                ('phone_number', models.CharField(blank=True, help_text='Contact phone number', max_length=15, null=True, unique=True)),
                ('email', models.EmailField(max_length=30, unique=True)),
                ('avatar', models.ImageField(blank=True, default='/profile_pics/default.png', null=True, upload_to='profile_pics/')),
                ('bonus_points', models.PositiveIntegerField(default=0)),
                ('confirmation_code', models.CharField(blank=True, max_length=4, null=True, verbose_name='Confirmation Code')),
                ('login', models.CharField(max_length=100, unique=True)),
                ('password', models.CharField(max_length=10)),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='branch', to='users.branch')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
